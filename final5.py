import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
def plot_default(map, ylab='Reward' ):
    name = ['DQN-OD', '全部开启', '全部关闭', 'FTS']
    plt.plot(map[0],marker='o' ,label= name[0])
    plt.plot(map[1],marker='o',label =name[1])
    plt.plot(map[2],marker='o', label=name[2])
    plt.plot(map[3], marker='o', label=name[3])
    plt.xlabel('场景')
    plt.ylabel(ylab)
    plt.xticks([0, 1, 2, 3], ['场景1', '场景2', '场景3', '场景4'])
    plt.legend()
    plt.rcParams['font.sans-serif'] = ['SimHei']  # 使用黑体字体
    plt.rcParams['axes.unicode_minus'] = False  # 正确显示负号
    plt.savefig(ylab+'.svg', format='svg')
    plt.show()

def plot_default(map, map_list=None, a=None, ylab='Reward'):

    ## 黄色：能耗 绿色：负载 蓝色：延迟
    i = 0
    # 创建图表和第一个y轴
    fig, ax1 = plt.subplots()

    # 绘制第一个y轴的数据
    color = 'tab:red'
    ax1.set_ylabel(ylab)
    ax1.set_xlabel('待机能耗(J)')
    ax1.tick_params(axis='y')

    name = ['全部开启', '全部关闭',  'FTS', 'DQN-OD']
    markers = ['d', '<','>', 'o', '>', '<', 'p', '*', 'h', 'H', '+', 'x', 'D', 'd', '|', '_']
    l = ['-','-','--','-']
    # 创建第二个y轴，共享相同的x轴
      # 创建次y轴
    if (map_list != None):
        for mapi in map_list:
            # ax1.plot([8,9, 10,11, 12,13, 14], mapi, color=s[i], label= name[i], marker=markers[i])
            ax1.plot([8, 9, 10, 11,12,13], mapi,  label=name[i], marker=markers[i],linestyle=l[i])
            i += 1
        ax1.plot([8, 9, 10, 11, 12, 13], map, label=name[i], marker=markers[i])
        i += 1

    lines, labels = ax1.get_legend_handles_labels()

    ax1.legend(lines , labels , loc='best')
    plt.rcParams['font.sans-serif'] = ['SimHei']  # 使用黑体字体
    plt.rcParams['axes.unicode_minus'] = False  # 正确显示负号
    plt.savefig('能耗变化'+ ylab + '.svg', format='svg')
    plt.show()
def min_max_scaler(data,max_value,min_value):
    return [(x - min_value) / (max_value - min_value) for x in data]
if __name__ == '__main__':
    # energy = [[271.2869051466232, 273.818854959974, 276.09519213493957, 277.37331773050136, 292.2237888033773, 295.5555788303603, 297.95068490778664], [294.87671382266564, 304.87671382266564, 314.87671382266564, 324.87671382266564,334.87671382266564, 344.87671382266564, 354.87671382266564], [250.35493157956782, 250.35493157956782, 250.35493157956782, 250.35493157956782, 250.35493157956782, 250.35493157956782, 250.35493157956782], [2246.8212058077565, 2246.8212058077565, 2246.8212058077565, 2246.8212058077565]]
    energy = [[218.08550610051623-4.972222222222222*2, 218.08550610051623-4.972222222222222, 218.08550610051623, 218.08550610051623+4.972222222222222,218.08550610051623+4.972222222222222*2, 218.08550610051623+4.972222222222222*3],
              [246.50787066934913, 256.50787066934913, 266.50787066934913, 276.50787066934913,286.50787066934913,296.50787066934913],
              [177.28082826686025, 177.28082826686025, 177.28082826686025, 177.28082826686025, 177.28082826686025, 177.28082826686025],
              [241.2522847316396, 250.57172917608398, 259.8911736205285, 259.89117362052815+9.3194444,259.89117362052815+9.3194444*2,259.89117362052815+9.3194444*3]]

    energy[0] = [item * 720 / 10000 for item in energy[0]]
    energy[1] = [item * 720 / 10000 for item in energy[1]]
    energy[2] = [item * 720 / 10000 for item in energy[2]]
    energy[3] = [item * 720 / 10000 for item in energy[3]]

    delay = [[0.698720330273992, 0.7111780898493654, 0.7197516728916619, 0.7262110077833274], [0.6574188242189402, 0.6574188242189402, 0.6574188242189402, 0.6574188242189402], [1.0857815493930787, 1.0857815493930787, 1.0857815493930787, 1.0857815493930787], [13.299450397880118, 12.705547597407628, 12.309612397092637, 12.026801539724788]]
    delay[0] = [item * 1000 for item in delay[0]]
    delay[1] = [item * 1000 for item in delay[1]]
    delay[2] = [item * 1000 for item in delay[2]]
    delay[3] = [item * 1000 for item in delay[3]]
    reward = [[327.8527576447699, 333.72976209316187, 337.9460899938466, 340.9638932219331], [314.6847363373763, 316.6847363373762, 318.6847363373761, 320.6847363373761], [490.94937083660744, 490.94937083660744, 490.94937083660744, 490.94937083660744], [52.827560729290994, 50.7236534657423, 49.32104862337647, 48.3191880216866]]
    plot_default(energy[0], [energy[1], energy[2], energy[3]], None, "系统总能耗(10^4 J)")
    # plot_default(delay[0], [delay[1], delay[2]], None, "平均时延 [ms]")
    # plot_default(delay2, [load4], expanded_list, "归一化时延/负载")


    # delay = [1.0563202937541067, 1.0463202937541067, 0.8682059491130265, 0.794719613238435, 0.7643502844540371,0.7547272143355528, 0.7371048187391924, 0.7244182110154899, 0.7275283479813833]
    # energy = [325.123213414131, 331.31245782908104, 383.09266656833853, 418.5842682148504, 422.5414240835018,434.03311641686014, 447.5484114221771, 449.9958577670207, 454.2291628323112]
    # plot_dou(delay, energy)