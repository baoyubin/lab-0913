import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
def plot_default(map, ylab='Reward', keepname = '1' ):
    name = ['DQN-OD', '全部开启', '全部关闭']

    plt.plot(map[1],marker='d',label =name[1])
    plt.plot(map[2],marker='<', label=name[2])

    plt.plot(map[0], marker='o', label=name[0],color='#d62728')
    plt.xlabel('时延权重')
    plt.ylabel(ylab)
    # plt.xticks([0, 1, 2, 3], ['0.2', '0.4', '0.6', '0.8'])
    plt.xticks([0, 1, 2, 3,4,5,6,7, 8], ['0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9'])
    plt.legend()
    plt.rcParams['font.sans-serif'] = ['SimHei']  # 使用黑体字体
    plt.rcParams['axes.unicode_minus'] = False  # 正确显示负号
    plt.savefig(keepname+'.svg', format='svg')
    plt.show()

def min_max_scaler(data,max_value,min_value):
    return [(x - min_value) / (max_value - min_value) for x in data]
if __name__ == '__main__':
    ##实验结果1
    # delay = [[0.31888362756092625, 0.4429155548560186, 0.5925688884605638, 0.6875283479813833], [0.29859860673863653, 0.39925803515418984, 0.5393971319578796, 0.6591483017328995], [0.4738705969518146, 0.7791451826683755, 0.9710442955312352, 1.088370960721589]]
    # delay = [[], [], [], []]
    delay = [[0.45877020472993124, 0.3922185383746214, 0.37682808999607587, 0.3640474086420543,0.3461357560073076, 0.3357844263585796, 0.33061698699343267, 0.3275904200618887,0.32071178747574813], [0.29760839111636195,0.29760839111636195, 0.29760839111636195, 0.29760839111636195, 0.29760839111636195,0.29760839111636195, 0.29760839111636195, 0.29760839111636195, 0.29760839111636195], [0.4724338287004145, 0.4724338287004145, 0.4724338287004145, 0.4724338287004145, 0.4724338287004145, 0.4724338287004145, 0.4724338287004145, 0.4724338287004145, 0.4724338287004145], [0.4724338287004145, 0.4724338287004145, 0.4724338287004145, 0.4724338287004145,13.299450397880118, 13.299450397880118, 13.299450397880118, 13.299450397880118]]
    delay[0] = [item * 1000 for item in delay[0]]
    delay[1] = [item * 1000 for item in delay[1]]
    delay[2] = [item * 1000 for item in delay[2]]



    # energy = [[], [], [], [2247.4378724744233, 2247.4378724744233, 2247.4378724744233, 2247.4378724744233]]
    energy = [[178.62376354970476, 181.67756512640864, 185.60068144107387, 191.80434576107328,201.21587128217678, 205.28679750468712, 207.78499541799934, 213.20143434942244,218.08550610051623], [266.50787066934913, 266.50787066934913, 266.50787066934913, 266.50787066934913,266.50787066934913, 266.50787066934913, 266.50787066934913, 266.50787066934913, 266.50787066934913], [177.28082826686025, 177.28082826686025, 177.28082826686025, 177.28082826686025,177.28082826686025, 177.28082826686025, 177.28082826686025, 177.28082826686025, 177.28082826686025], [2247.4378724744233, 2247.4378724744233, 2247.4378724744233, 2247.4378724744233, 2247.4378724744233]]
    energy[0] = [item * 720 / 10000 for item in energy[0]]
    energy[1] = [item * 720 / 10000 for item in energy[1]]
    energy[2] = [item * 720 / 10000 for item in energy[2]]

    plot_default(delay, "平均时延(ms)", '时延权重')
    plot_default(energy, "系统总能耗(10^4 J)", '能耗权重')

    # delay = [1.0563202937541067, 1.0463202937541067, 0.8682059491130265, 0.794719613238435, 0.7643502844540371,0.7547272143355528, 0.7371048187391924, 0.7244182110154899, 0.7275283479813833]
    # energy = [325.123213414131, 331.31245782908104, 383.09266656833853, 418.5842682148504, 422.5414240835018,434.03311641686014, 447.5484114221771, 449.9958577670207, 454.2291628323112]
    # plot_dou(delay, energy)